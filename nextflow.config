/*
#########################################################################
##                                                                     ##
##     nextflow.config of repertoire profiler                          ##
##                                                                     ##
##     gmillot A. Millot                                               ##
##     Chloe Taurel                                                    ##
##     Bioinformatics and Biostatistics Hub                            ##
##     Computational Biology Department                                ##
##     Institut Pasteur Paris                                          ##
##                                                                     ##
#########################################################################
*/

/*
#########################################################################
##                                                                     ##
##     Parameters that must be set by the user                         ##
##                                                                     ##
#########################################################################
*/


/*
########################
##                    ##
##     Data           ##
##                    ##
########################
*/

env {
    sample_path = "/mnt/c/Users/gmillot/Documents/Git_projects/repertoire_profiler/dataset/human_IGH" // single character string of the path of the fasta files directory. The last / can be added or not, as it is removed by nextflow file(). Can also be a .zip file that contains only fasta files. Warning: the fasta names must not start by a digit, before alakazam::readChangeoDb() function is fixed by the maintainer. Example : sample_path="/mnt/c/Users/gmillot/Documents/Git_projects/repertoire_profiler/dataset/human_IGH" or sample_path="/pasteur/appa/homes/gmillot/dataset/20210707_AV07016_HAD-III-89_plate3_IgK_sanger_seq". Example with spaces in the path: sample_path="/mnt/x/ROCURONIUM PROJECT/01 Primary data/04.Repertoire analysis/SORT1/SORT1 Seq-original/xlsx_to_fasta_1669018924/All/VL". Example: sample_path = "/mnt/c/Users/gmillot/Documents/Git_projects/repertoire_profiler/dataset/ig_clustering_test_1_VH". Example: sample_path = "https://zenodo.org/records/17177124/files/human_IGH.zip".
    meta_path = "/mnt/c/Users/gmillot/Documents/Git_projects/repertoire_profiler/dataset/human_IGH_metadata.tsv" // single character string of a valid path of a metadata file for adding info to the results. Write "NULL" if no metadata to add. WARNING: the metadata .tsv table must include a column containing sequence names. See the meta_seq_names parameter below. Example: meta_path = "NULL". Example: meta_path = "https://zenodo.org/records/17177124/files/human_IGH_metadata.tsv".
    meta_seq_names = "Seq_ID" // single character string of the column name of the file indicated in the meta_path parameter. This column name must contain the header of some of the fasta files from sample_path, without the ">" of the header. Warning: anticipate the fact that only the first 100 characters of headers are used and that any other characters than alphanumeric are replaced by underscores. Cannot be "NULL". Ignored if meta_path is "NULL". Example: meta_seq_names = "Seq_ID".
    meta_name_replacement = "Name" // single character string of the column name of the file indicated in the meta_path parameter. This column will be used to replace the sequence names/IDs (header of the fasta files) by more appropriate names in returned .tsv and .pdf files (but the initial sequence name/ID remains indicated in all .tsv files, in the initial_id_sequence column). This is convenient to easily identify some Ig of interest in a huge set of Ig. Warning: "" and NA in The meta_name_replacement column are not considered. Write "NULL" if not required and if meta_path is not "NULL". Ignored if meta_path = "NULL". Example: meta_name_replacement = "Name". Of note, germ_tree_leaf_size parameter is ignored if meta_name_replacement is a numeric column ,and germ_tree_leaf_shape is ignored if the column is another mode.
}

/*
#########################################
##                                     ##
##     Ig annotation                   ##
##                                     ##
#########################################
*/

// Determine the V, D, J and C most probable allele used during VDJ recombination in the query sequence. 
// Perfomed by AssignGenes.py igblast of changeo. See https://changeo.readthedocs.io/en/stable/tools/AssignGenes.html.
// The names and sequences indicated in all the "germline_*" columns of the productive_seq.tsv output are from the IMGT database.

env {
    igblast_organism = "human" // single character string indicating the organism analyzed. Either "mouse", "human", "rabbit", "rat" or "rhesus_monkey" (value of the --organism option of AssignGenes.py igblast). Example: igblast_organism="human". Example: igblast_organism="mouse"
    //igblast_database_path = "germlines/imgt/mouse/vdj" // single character string of the path of the database provided by igblast indicating a folder of fasta files, WITHOUT the last /. Normally, only the organism name should be changed in the path, to be the same as in the igblast_organism parameter. Example: igblast_database_path="germlines/imgt/human/vdj". Example: igblast_database_path="germlines/imgt/mouse/vdj". Warnings (for developers only): (1) see \\wsl$\Ubuntu-20.04\home\gmillot\share for the different possibilities of paths and (2) change this code in the .nf file " MakeDb.py igblast -i \${FILE}_igblast.fmt7 -s ${fs} -r \${REPO_PATH}/imgt_human_IGHV.fasta \${REPO_PATH}/imgt_human_IGHD.fasta \${REPO_PATH}/imgt_human_IGHJ.fasta --extended" if the present path is modified
    igblast_loci = "ig" // single character string of the value of the --loci option of AssignGenes.py igblast.Either "ig" or "tr". Example: igblast_loci="ig"
    igblast_heavy_chain = "TRUE" // single character string indicating if the igblast program will search for genes in the Heavy Chain IMGT database. Can either be "TRUE", "true", "FALSE" or "false"
    igblast_lambda_chain = "FALSE" // single character string indicating if the igblast program will search for genes in the Light Chain, Locus lambda (L) IMGT database. Can either be "TRUE", "true", "FALSE" or "false"
    igblast_kappa_chain = "FALSE" // single character string indicating if the igblast program will search for genes in the Light Chain, Locus kappa (K) IMGT database. Can either be "TRUE", "true", "FALSE" or "false"
}


/*
###########################################################
##                                                       ##
##     Clonal groups (clustering) and mutation load      ##
##                                                       ##
###########################################################
*/

// Definition of clonal groups is a complex process as it estimates that the sequences (one sequence per cell) from a same clonal group should derived from a single germline sequence (germline cell). Here, the following immcantation tool are used:
// shazam::distToNearest()
// DefineClones.py of changeo
// -> defines clone ID (clonal groups, see the clone_id column in the clone_assigned_seq.tsv output file).
// CreateGermlines.py of changeo 
// -> reconstruct the germline sequence of the clonal group. See the germline_v_call, germline_d_call, germline_j_call and germline_alignment_d_mask in the clone_assigned_seq.tsv output file.

env {
    // The pipeline uses DefineClones.py default parameters except those listed below. See https://changeo.readthedocs.io/en/stable/tools/DefineClones.html
    clone_strategy = "first" // single character string indicating how ambiguous gene assignments are handled in DefineClones.py. Two values are possible: "first" and "set". "first" uses only the first gene listed when a sequence is assigned to multiple genes (e.g., takes IGHV4-30-4*09 when v_call is IGHV4-30-4*09,IGHV4-31*03). "set" constructs clonal groups based on the full set of sequences sharing at least one gene, directly or indirectly (through overlapping gene assignments). Use "first" to restrict clonal definition to the most confident gene assignment. Use "set" to allow broader clonal grouping by gene linkage. Option --act of DefineClones.py.
    clone_model = "ham" // single character string of the model used to compute the distance between sequences, before clutering them to clonal groups. Either "ham", "aa", "hh_s1f", "hh_s5f", "mk_rs1nf", "mk_rs5nf", "m1n_compat", "hs1f_compat". By default, use "ham" for nucleotide Hamming distance and “aa” for amino acid Hamming distance. See https://shazam.readthedocs.io/en/stable/topics/distToNearest/#details and https://shazam.readthedocs.io/en/stable/vignettes/DistToNearest-Vignette/. Option --model of DefineClones.py.
    clone_normalize = "len" // single character string of the normalization used to compute the distance between sequences, before clutering them to clonal groups. Either "none" (do not normalize), "len" (normalize by length), or "mut" (normalize by number of mutations between sequences). Option --norm of DefineClones.py.
    clone_distance = "0.15" // single character string of a positive proportion value, setting the distance threhold that defines the appartenance of 2 sequences to a same clonal group or not. See https://shazam.readthedocs.io/en/stable/vignettes/DistToNearest-Vignette/. Option --dist of DefineClones.py.

    // The pipeline uses CreateGermlines.py default parameters except those listed below. See https://changeo.readthedocs.io/en/stable/tools/CreateGermlines.html
    clone_germline_kind = "dmask" // single character string of the kind of germline sequence reconstructed for the clonal group. Either "full","dmask","vonly", for respectively full germline, germline with D segment masked, or germline for V segment only. Warning: the "full" option normally overwrites the "germline_alignment" column (filled by AssignGenes.py igblast and overwritten by CreateGermlines.py). But this pipeline protects the initial `germline_alignment` column and create the "germline_alignment_full" column. Option -g of CreateGermlines.py.

    // The pipeline uses shazam::observedMutations() default parameters except those listed below. See https://www.rdocumentation.org/packages/shazam/versions/1.2.0/topics/observedMutations
    clone_mut_obs_seq = "sequence_alignment" // single character string of the input sequence to compare. A column name of the clone_assigned_seq.tsv file must be provided. Argument sequenceColumn of shazam::observedMutations().
    clone_mut_germ_seq = "germline_alignment_d_mask" // single character string of the germline sequence to compare. A column name of the clone_assigned_seq.tsv file must be provided. Warning: advice is to use a column name depending on what has been set for the clone_germline_kind parameter above: "germline_alignment_d_mask" when clone_germline_kind = "dmask", "germline_alignment_v_region" when clone_germline_kind = "vonly" and "germline_alignment_full" when clone_germline_kind = "full". Mutations count and frequencies will be compute between the clone_mut_obs_seq and clone_mut_germ_seq columns. Argument germlineColumn of shazam::observedMutations().
    clone_mut_regionDefinition = "IMGT_VDJ_BY_REGIONS" // single character string of the regions and boundaries for which the mutation counts and frequencies are required. Either "NULL", "IMGT_V", "IMGT_V_BY_CODONS", "IMGT_V_BY_REGIONS", "IMGT_V_BY_SEGMENTS", "IMGT_VDJ", "IMGT_VDJ_BY_REGIONS". If "NULL", mutations are counted for entire sequence. Warning: to use regions definitions, sequences in clone_mut_obs_seq and clone_mut_regionDefinition must be aligned ones, following the IMGT schema. See https://search.r-project.org/CRAN/refmans/shazam/html/IMGT_SCHEMES.html and https://search.r-project.org/CRAN/refmans/shazam/html/setRegionBoundaries.html
}


/*
#########################################
##                                     ##
##     Alignments                      ##
##                                     ##
#########################################
*/

// Sequence alignments are perfomed using Abalign (default), or Mafft if the align_seq parameter of the nextflow.config file is "query", "igblast_full" or "trimmed". Indeed, Abalign returns alignment of the variable region only, whatever the length of the submitted sequence. Abalign has however the strong advantage to take the V, D, J regions as constrain in the alignments, which is not the case of Mafft.

env {
    align_clone_nb = "2" // single character string of a positive integer value greater or equal to 2. Minimun number of non-identical sequences per clonal group for alignments. Example: align_clone_nb = "5". Cannot be below 2.
    align_soft = "abalign" // single character string indicating which aligner to use. Can be either "abalign" or "maftt". Warning: if the align_seq parameter of the nextflow.config file is "query", "igblast_full" or "trimmed", then the align_soft parameter is systematically "maftt". Indeed, Abalign returns alignment of the variable region only, whatever the length of the submitted sequence. Abalign has however the strong advantage to take the V, D, J regions as constrain in the alignments, which is not the case of Mafft.
    align_seq = "sequence_alignment" // single character string indicating which sequences from the productive_seq.tsv are used to perform nucleotide and amino-acid alignments. Can be either:
        // See the definition of each column here https://github.com/gael-millot/repertoire_profiler#output.
        // "query" (sequence (query) and query_sequence_aa columns), 
        // "igblast_full" (sequence (query) and sequence_aa columns), 
        // "trimmed" (trimmed_sequence and trimmed_sequence_aa columns), 
        // "fwr1" (fwr1 and fwr1_aa columns), 
        // "fwr2" (fwr2 and fwr2_aa columns), 
        // "fwr3" (fwr3 and fwr3_aa columns), 
        // "fwr4" (fwr4 and fwr4_aa columns), 
        // "cdr1" (cdr1 and cdr1_aa columns), 
        // "cdr2" (cdr2 and cdr2_aa columns), 
        // "cdr3" (cdr3 and cdr3_aa columns), 
        // "junction" (junction and junction_aa columns), 
        // "sequence_alignment" (sequence_alignment and sequence_alignment_aa columns), 
        // "v_sequence_alignment" (v_sequence_alignment and v_sequence_alignment_aa columns), 
        // "d_sequence_alignment" (d_sequence_alignment and d_sequence_alignment_aa columns), 
        // "j_sequence_alignment" (j_sequence_alignment and j_sequence_alignment_aa columns), 
        // "c_sequence_alignment" (c_sequence_alignment and c_sequence_alignment_aa columns), 
        // "germline_alignment" (germline_alignment and germline_alignment_aa columns), 
        // "v_germline_alignment" (v_germline_alignment and v_germline_alignment_aa columns), 
        // "d_germline_alignment" (d_germline_alignment and d_germline_alignment_aa columns), 
        // "j_germline_alignment" (j_germline_alignment and j_germline_alignment_aa columns), 
        // "c_germline_alignment" (c_germline_alignment and c_germline_alignment_aa columns).  
}

/*
########################
##                    ##
##     Graphics       ##
##                    ##
########################
*/

env {
    meta_legend = "Affinity" // single character string of the name of a column of the table indicated in the meta_path parameter. This column will be used to add a legend in trees (and only in trees), in order to visualize an additionnal parameter like KD, names, etc. If a numeric column is indicated, it will be used for leaf size. If a non numeric column is indicated, it will be used for coloring the leafs according to the classes inside the column. Ignored if meta_path = "NULL". Warning: "" and NA in The meta_name_replacement column are not considered. Example: meta_legend = "KD". Write meta_legend = "NULL" if non required. Of note, germ_tree_leaf_size parameter is ignored if meta_legend is a numeric column ,and germ_tree_leaf_shape is ignored if the column is another mode
    germ_tree_kind = "rectangular" // single character string of the kind of tree. Can be "rectangular", "roundrect", "slanted", "ellipse", "circular", "fan", "equal_angle", "daylight". See https://yulab-smu.top/treedata-book/chapter4.html#tree-layouts
    germ_tree_duplicate_seq = "TRUE" // single character string indicating if identical sequences (coming from different cell or sequence names) must be removed from trees or not. Either "TRUE" for keeping or "FALSE" for removing. FALSE is interesting when lots of identical sequences overload trees. Removed sequences are indicated in the title of the tree plot.
    germ_tree_leaf_color = "NULL" // single character string of the color of leaf tip. Ignored if meta_legend parameter is a name of a non numeric column of the meta_path parameter
    germ_tree_leaf_shape = "21" // single character string of the shape of leaf tip. See https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/points.html
    germ_tree_leaf_size = "3" // single character string of the size of leafs (positive numeric value in mm, the size of the plot being 120 x 120 mm). Ignored if meta_legend parameter is a name of a numeric column of the meta_path parameter
    germ_tree_label_size = "2" // single character string of the size of leaf labeling (positive numeric value in mm, the size of the plot being 120 x 120 mm)
    germ_tree_label_hjust = "-0.3" // single character string of the adjustment of leaf labeling (numeric value). Negative increasing value to move away.
    germ_tree_label_rigth = "FALSE" // single character string of the position of the labeling. Either "TRUE" or "FALSE". Only works for germ_tree_kind = "rectangular" and users need to use theme() to adjust tip labels in this case
    germ_tree_label_outside = "TRUE" // single character string of the display of the labeling outside of the plot region (if labels are truncated). Either "TRUE" or "FALSE"
    germ_tree_right_margin = "1.5" // single character string of the positive numeric value for the right margin in inches, considering 5 inches the width of the graphic device
    germ_tree_legend = "TRUE" // single character string of the display of the legend. Either "TRUE" or "FALSE"
    donut_palette = "Accent" // single character string of the color palette of the donut. Write "NULL" for default. Example: donut_palette = "Accent". See https://ggplot2.tidyverse.org/reference/scale_brewer.html#palettes
    donut_hole_size = "0.5" // single character string of the positive proportion of donut central hole, 0 meaning no hole (pie chart) and 1 no plot (donut with a null thickness)
    donut_hole_text = "TRUE" // single character string of the display of the sum of frequencies in the middle of the donut. Either "TRUE" or "FALSE"
    donut_hole_text_size = "8" // single character string of the positive numeric value of the font size in mm of the text in the middle of the donut. Ignored if hole.text is FALSE
    donut_border_color = "gray50" // single character string of the color of the donut borders. Either "black" or "white". Example: donut_border_colors = "black"
    donut_border_size = "0.2" // single character string of the size of the donut borders (positive numeric value in mm, the size of the plot being 120 x 120 mm)
    donut_annotation_distance = "0.8" // single character string of the distance from the center of the slice. 0 means center of the slice, 0.5 means at the edge (positive numeric value ). Above 0.5, the donut will be reduced to make place for the annotation. Ignored if meta_path is NULL
    donut_annotation_size = "3" // single character string of the annotation font size in mm (numeric value). Ignored if meta_path is NULL
    donut_annotation_force = "50" // single character string of the force of repulsion between overlapping text labels (numeric value). See ?ggrepel::geom_text_repel() in R. Ignored if meta_path is NULL
    donut_annotation_force_pull = "1" // single character string of the force of attraction between a text label and its corresponding data point (numeric value). See ?ggrepel::geom_text_repel() in R. Ignored if meta_path is NULL
    donut_legend_width = "0.55" // single character string indicating the relative width of the legend sector (on the right of the plot) relative to the width of the plot (single proportion between 0 and 1). Value 1 means that the window device width is split in 2, half for the plot and half for the legend. Value 0 means no room for the legend, which will overlay the plot region. Write NULL to inactivate the legend sector. In such case, ggplot2 will manage the room required for the legend display, meaning that the width of the plotting region can vary between graphs, depending on the text in the legend
    donut_legend_text_size = "6" // single character string of the font size in mm of the legend labels (numeric value)
    donut_legend_box_size = "3" // single character string of the size of the legend squares in mm (numeric value)
    donut_legend_box_space = "2" // single character string of the space between the legend boxes in mm (numeric value)
    donut_legend_limit = "NULL" // single character string of the classes displayed in the legend for which the corresponding proportion is over the mentionned proportion threshold (positive proportion). Example: donut_legend_limit = 0.4 means that only the sectors over 40% of the donut will be in the legend. Write "all" for all the sectors in the legend (no limit required). Write "NULL" for the ten biggest sectors. Warning, when donut_legend_limit is a proportion and leads to 0 sectors represented (limit too high), then 10 sectors will be finally represented in the legend with a warning message.
    phylo_tree_model_path = "./bin/AB_model" // single character string indicating the path of the evolutionary model/matrix file, dedicated to antibodies (https://doi.org/10.1093/molbev/msu340). Change this parameter value only if you want another model. Example: phylo_tree_model_path = "/mnt/c/Users/gmillot/Documents/Git_projects/repertoire_profiler/bin/AB_model". Example: phylo_tree_model_path="./bin/AB_model", Example: phylo_tree_model_path="$projectDir/bin/AB_model". Example: phylo_tree_model_path="https://gitlab.pasteur.fr/gmillot/repertoire_profiler/-/tree/master/bin/AB_model"
    phylo_tree_itolkey = "eOIzrxSbR2pyDVxMwEGY2g" // single character string indicating the iTOL user api key, tu upload the trees and download the images. Example: phylo_tree_itolkey = "eOIzrxSbR2pyDVxMwEGY2g"
    phylo_tree_itol_subscription = "FALSE" // single character string og the subscription to ITOL for automated visualization of trees with the production of an html link. Either TRUE or FALSE.
}


/*
######################################
##                                  ##
##     Local / Cluster execution    ##
##                                  ##
######################################
*/

apptainer_local_images = "/mnt/c/Users/gmillot/apptainer" // single character string of the path of the apptainer folder (where all the apptainer images are are pulled and stored for proper nextflow execution). You can indicate an empty folder. In that case, docker images will be pulled from dockerhub, converted into apptainer images and stored into this indicted folder for next executions. Example: apptainer_local_images='/mnt/c/Users/gmillot/apptainer'. Example: apptainer_local_images="$projectDir/apptainer" # do not forget double quotes in that case. See https://confluence.pasteur.fr/pages/viewpage.action?pageId=69304504.
apptainer_cluster_images = "/pasteur/helix/projects/BioIT/gmillot/apptainer" // as for apptainer_local_images but for a cluster usage. It must be a shared folder accessible to all computing nodes. Example: apptainer_local_images='/pasteur/helix/projects/BioIT/gmillot/apptainer'. 
system_exec = 'local' // single character string of the system that runs the workflow. Write 'local' to run on our own computer or any job scheduler managed by nextflow. See the list here: https://www.nextflow.io/docs/latest/executor.html. Example system_exec = 'slurm' (pasteur cluster). Example: system_exec = 'local'. Warning: when using "slurm" other than for the Pasteur cluster, it must be necessary to modify runOptions = '--no-home --bind /pasteur' below. Please, use add_options = '-cwd -l s_vmem=60G' when using sge
cluster_runOptions = "NULL" // single character string of the runOptions parameter of the scheduler. If "NULL", then default values are used, depending on the system_exec setting: (1) if system_exec == 'slurm', then runOptions = '--no-home --bind /pasteur', (2) if system_exec == 'sge', then runOptions = '--bind /rshare1:/rshare1', (3) if system_exec == 'local', then runOptions = '--no-home -B /run/shm:/run/shm'. Please, write the correct runOptions setting if unsure of your environment.
simult_jobs = 3000 // number of max simultaneous jobs. This is to avoid to saturated a cluster if millions of jobs in parallel. Write 0 for all the threads.
slurm_queue = 'common,dedicated' // single character string of the -p option of slurm. Example: slurm_queue = 'common,dedicated'. Example: slurm_queue = 'hubbioit'
slurm_qos = '--qos=fast' // single character string of the --qos option of slurm. Example: slurm_qos= '--qos=fast'. Example: slurm_qos = '--qos=ultrafast'. Example: slurm_qos = '--qos=hubbioit'
add_options = ' ' // single character string of the additional option of slurm. Example: add_options = '--exclude=maestro-1101,maestro-1034' or add_options = ' ', add_options = '--time=70:00:00' (acceptable time formats include "minutes", "minutes:seconds", "hours:minutes:seconds", "days-hours", "days-hours:minutes" and "days-hours:minutes:seconds"). See https://slurm.schedmd.com/sbatch.html#OPT_time for other options.  Please, use add_options = '-cwd -l s_vmem=60G' when using system_exec = 'sge'.

/*
#############################
##                         ##
##     Other (optional)    ##
##                         ##
#############################
*/

env{
    cute_path = "$projectDir/bin/cute_little_R_functions_v12.8.R" // single character string indicating the file (and absolute pathway) of the required cute_little_R_functions toolbox. With ethernet connection available, this can also be used: "https://gitlab.pasteur.fr/gmillot/cute_little_R_functions/raw/v5.1.0/cute_little_R_functions.R" or local "C:\\Users\\gmillot\\Documents\\Git_projects\\cute_little_R_functions\\cute_little_R_functions.R". Other example if no internet: cute_path="$projectDir/bin/cute_little_R_functions_v12.8.R"
    igphylm_exe_path = "/usr/local/share/igphyml/src/igphyml" // single character string indicating the path of the igphyml exec file. No need to change that path when using the containers defined below. Example: igphylm_exe_path = "/usr/local/share/igphyml/src/igphyml". Example: igphylm_exe_path = "\\\\wsl$\\Ubuntu-20.04\\home\\gmillot\\bin\\igphyml\\src\\igphyml"
    template_rmd_path = "./bin/repertoire_profiler_template.rmd"
}
out_path_ini = "$projectDir/results" // single character string of where the output files will be saved. Example out_path_ini = '.' for where the main.nf run is executed or out_path_ini = "$projectDir/results" to put the results in a result folder (created if required), $projectDir indicating where the main.nf run is executed. Example: out_path_ini = '/mnt/c/Users/gmillot/Desktop'. Example : out_path_ini="/pasteur/helix/projects/BioIT/gmillot/08002_bourgeron/results". Warning: this does not work: out_path_ini = "/mnt/share/Users/gmillot/Desktop"
result_folder_name = "repertoire_profiler" // single character string.of the name of the folder where the results files are dorpped


/*
#########################################################################
##                                                                     ##
##     End Parameters that must be set by the user                     ##
##                                                                     ##
#########################################################################
*/








//////// Pre processing

int secs = (new Date().getTime())/1000
out_path ="${out_path_ini}/${result_folder_name}_${secs}"

//////// end Pre processing



//////// variables used here and also in the main.nf file

env {
    system_exec = "${system_exec}"
    out_path_ini = "${out_path_ini}"
    out_path = "${out_path}"
    slurm_queue = "${slurm_queue}"
    slurm_qos = "${slurm_qos}"
    add_options = "${add_options}"
}

//////// variables used here and also in the main.nf file





//////// Scopes

// those are closures. See https://www.nextflow.io/docs/latest/script.html#closures
executor { 
    // name = "slurm" // means "if name of the executor is slurm, then ${simult_jobs}, i.e., max ${simult_jobs} simultaneous jobs". Inactivated because applied to all kinds of executors
    queueSize = "${simult_jobs}" // can only be written here and not below because queueSize is a method of executor{}
}

// create a report folder and print a html report file . If no absolute path, will be where the run is executed
// see https://www.nextflow.io/docs/latest/config.html#config-report
report {
       enabled = true
       file = "${out_path}/reports/report.html" // warning: here double quotes to get the nextflow variable interpretation
}

// txt file with all the processes and info
trace {
    enabled = true
    file = "${out_path}/reports/trace.txt"
}

// html file with all the processes
timeline {
    enabled = true
    file = "${out_path}/reports/timeline.html"
}

// .dot picture of the workflow
dag {
    enabled = true
    file = "${out_path}/reports/nf_dag.png"
}


// define apptainer parameters
apptainer {
    enabled = true
    autoMounts = true // automatically mounts host paths in the executed container
    pullTimeout = '7d'
    if(cluster_runOptions == "NULL"){
        if(system_exec == 'slurm'){
            runOptions = '--no-home --bind /pasteur' //-B /run/shm:/run/shm has been removed because block the pipeline. Warning: clone_assignment process use python. Thus, -B /run/shm:/run/shm should be required normally
        }
        if(system_exec == 'sge'){
            runOptions = '--no-home --bind /rshare1:/rshare1'
        }
        if(system_exec == 'local'){
            runOptions = '--no-home -B /run/shm:/run/shm' // --no-home prevent apptainer to mount the $HOME path and thus forces apptainer to work with only what is inside the container
        }
    }else{
        runOptions = "${cluster_runOptions}"
    }
    //runOptions = '--home $HOME:/home/$USER --bind /pasteur' // provide any extra command line options supported by the apptainer exec. Here, fait un bind de tout /pasteur dans /pasteur du container. Sinon pas d accès
    if(system_exec == 'local'){
        cacheDir = "${apptainer_local_images}" // "$projectDir/apptainer" can be used but do not forget double quotes.
    }else{
        cacheDir = "${apptainer_cluster_images}" // name of the directory where remote Apptainer images are stored. When rerun, the exec directly uses these without redownloading them. When using a computing cluster it must be a shared folder accessible to all computing nodes
    }
}

//////// end Scopes



//////// directives

// provide the default directives for all the processes in the main.nf pipeline calling this config file
process {
// directives for all the processes
    cpus = 1
    memory='3G'
    executor = "${system_exec}"
    // process.shell = ['/bin/bash', '-euo', 'pipefail']
    // beforeScript = 'module load apptainer'
// end directives for all the processes

    if(system_exec == 'slurm'){
        queue = "$slurm_queue"
        clusterOptions = "$slurm_qos $add_options"
        scratch=false
        maxRetries=3
        errorStrategy = {task.exitStatus in 137..143 ? 'retry' : 'terminate' }
    }else if(system_exec != 'local'){
        beforeScript= '''
            module use /usr/local/package/modulefiles
            module load apptainer/1.2.4
        '''
        penv = 'mpi' // penv stands for Parallel Environment (PE). 'mpi' is a common parallel environment name, often used for Message Passing Interface (MPI) jobs. Please, run qconf -spl on the cluster login node to list available parallel environments. Common PEs are smp, mpi, or similar.
        clusterOptions = "$add_options -S /bin/bash"
        maxRetries=3
        errorStrategy = {task.exitStatus in 137..143 ? 'retry' : 'terminate' }
    }else if(system_exec == 'local'){
        maxRetries=0
        errorStrategy='terminate'
    }

    withLabel: bash {
        container = 'gmillot/bash-extended_v4.0:gitlab_v8.0'
        cpus = 1
        memory = '500M'
    }

    withLabel: unzip {
        container='gmillot/ubuntu_v22.04_extended_v1.0:gitlab_v10.2'
        cpus=1 // only used when name = "local" in the executor part above
        memory='1G' // only used when name = "local" in the executor part above
    }

    withLabel: immcantation {
        container = 'gmillot/immcantation_v2.0:gitlab_v10.9'
        cpus = 1
        memory = '3G'
    }

    withLabel: immcantation_10cpu {
        container = 'gmillot/immcantation_v2.0:gitlab_v10.9'
        cpus = 10
        memory = '15G'
    }

    withLabel: r_ig_clustering {
        container='gmillot/r_v4.1.2_ig_clustering_v1.3:gitlab_v9.9'
        cpus=1 // only used when name = "local" in the executor part above
        memory='3G' // only used when name = "local" in the executor part above
    }

    withLabel: r_ext {
        container='gmillot/r_v4.4.2_extended_v1.2:gitlab_v11.6'
        cpus=1 // only used when name = "local" in the executor part above
        memory='3G' // only used when name = "local" in the executor part above
    }

    withLabel: seqkit {
        container='pegi3s/seqkit:2.3.0'
        cpus=1 // only used when name = "local" in the executor part above
        memory='3G' // only used when name = "local" in the executor part above
    }

    //////// Fred's part
    withLabel: mafft {
        container= 'evolbioinfo/mafft:v7.467'
    }

    withLabel: abalign {
        container= 'gmillot/abalign2_v1.0:gitlab_v10.2'
    }

    withLabel: tabletoitol {
        container= 'evolbioinfo/table2itol:fa4b43c'
    }

    withLabel: gotree {
        container= 'evolbioinfo/gotree:v0.4.4'
    }
    withLabel: snag {
        container= 'evolbioinfo/snag:v0.2'
    }
    withLabel: raxml {
        container= 'evolbioinfo/raxml-ng:v1.2.0'
    }
    withLabel: goalign {
        container = 'evolbioinfo/goalign:devd79470b'
    }
    withLabel : iqtree {
        container = 'evolbioinfo/iqtree:v2.2.5'
        cpus=5
        memory='5G'
    }    
    withLabel: python {
        container = 'evolbioinfo/python-evol:v3.7.3condor'
    }
    withLabel : pastml {
        container = 'evolbioinfo/pastml:v1.9.33'
        cpus = 5
        memory='5G'
    }
    withLabel : iqtree2 {
        container = 'evolbioinfo/iqtree:v2.1.3'
        cpus=5
        memory='5G'
    }
    withName : ITOL {
        executor='local' // must be local to have internet
    }
    //////// end Fred's part
}

//////// end directives


